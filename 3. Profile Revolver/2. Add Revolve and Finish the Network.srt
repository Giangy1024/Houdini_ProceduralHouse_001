WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.580
（欢快的音乐）

00:00:02.580 --> 00:00:05.680
大家好，欢迎回来。

00:00:05.680 --> 00:00:09.480
在本视频中，我们将开始添加更多节点

00:00:09.480 --> 00:00:13.840
真正让我们的轮廓旋转成一个形状。

00:00:13.840 --> 00:00:16.520
好的，现在开始，

00:00:16.520 --> 00:00:18.880
我想做的一件事就是旋转它。

00:00:18.880 --> 00:00:21.480
所以这将是一个转换节点。

00:00:21.480 --> 00:00:23.660
好的，就将其插入这里。

00:00:23.660 --> 00:00:28.660
然后看起来我们需要在 X 轴上旋转 90 度。

00:00:28.860 --> 00:00:31.040
好的，看起来就是这样。

00:00:31.040 --> 00:00:33.300
实际上可能不是 X，让我们看看。

00:00:33.300 --> 00:00:36.400
所以我想让它基本上以这种方式旋转。

00:00:36.400 --> 00:00:40.440
是的，看起来那里是 Z 90 度。

00:00:40.440 --> 00:00:45.440
好的，我要打电话给这个家伙，修复方向。

00:00:45.440 --> 00:00:50.400
因此我们实际上是处于垂直方向的。

00:00:50.400 --> 00:00:53.700
然后我们就可以旋转了。

00:00:53.700 --> 00:00:57.120
旋转，好的。

00:00:57.120 --> 00:00:59.720
这将会不断循环。

00:00:59.720 --> 00:01:01.940
我确实看到存在问题。

00:01:01.940 --> 00:01:04.400
我们的内外部都有这种形状。

00:01:04.400 --> 00:01:07.600
好的，为了解决这个问题，在我们旋转之前，

00:01:07.600 --> 00:01:10.280
我们可以做反向操作。

00:01:10.280 --> 00:01:13.920
好的，现在修复它。

00:01:13.920 --> 00:01:16.560
你也可以随后进行反向操作，

00:01:16.560 --> 00:01:19.720
但提前反转可以节省一些性能

00:01:19.720 --> 00:01:21.640
因为这样你需要处理的事情就少了。

00:01:21.640 --> 00:01:24.800
好的，我要把这个家伙从内到外都修复好。

00:01:26.040 --> 00:01:28.800
好的，那么 rotate 就被称为 rotate

00:01:28.800 --> 00:01:30.800
因为它的作用就这些。

00:01:30.800 --> 00:01:33.920
好吧，我还想为旋转做一件事

00:01:33.920 --> 00:01:38.160
我希望它能够在这里定义端盖。

00:01:38.160 --> 00:01:42.720
好的，原因是因为这些家伙会有一个团体。

00:01:42.720 --> 00:01:43.760
我们来检查一下。

00:01:43.760 --> 00:01:47.400
因此，如果外部代码想要删除它，他们可以。

00:01:47.400 --> 00:01:49.840
我只是想让外部代码变得更容易。

00:01:49.840 --> 00:01:52.240
我以为它会随帽子一起发货，

00:01:52.240 --> 00:01:54.700
但如果他们选择不设上限，

00:01:54.700 --> 00:01:56.800
他们可以轻松地将其移除。

00:01:56.800 --> 00:02:00.120
好的，您看，我也看到了要点。

00:02:00.120 --> 00:02:03.120
我看到了复选框，它基本上就是 UV。

00:02:03.120 --> 00:02:05.240
如果您没有看到，那就是原因。

00:02:05.240 --> 00:02:07.940
而且那里确实存在一些附加差异。

00:02:07.940 --> 00:02:11.480
好的，说到这个，如果你看一下紫外线，

00:02:11.480 --> 00:02:15.100
你可以看到，嗯，紫外线还行，我想，

00:02:15.100 --> 00:02:18.960
圆柱形，但顶部和底部的盖子

00:02:18.960 --> 00:02:20.800
没有任何紫外线。

00:02:20.800 --> 00:02:23.960
好的，所以我们想在某种程度上解决这个问题。

00:02:23.960 --> 00:02:28.200
所以让我们对这两个帽子做一个 UV 项目。

00:02:28.200 --> 00:02:31.400
那么 UV 项目，好的，我要把它放在这里。

00:02:31.400 --> 00:02:36.640
我想要定义使用端盖的组。

00:02:36.640 --> 00:02:37.840
让我们看看。

00:02:37.840 --> 00:02:41.200
什么也没看见。

00:02:41.200 --> 00:02:42.840
那很有意思。

00:02:42.840 --> 00:02:45.280
我们是否投射到了错误的地方？

00:02:45.280 --> 00:02:49.040
让我们看一下该组应该是端盖。

00:02:49.040 --> 00:02:49.880
这是正确的。

00:02:49.880 --> 00:02:53.600
我们按空格键 F5 来查看 UV。

00:02:53.600 --> 00:02:55.340
看来我们的紫外线不是最好的。

00:02:55.340 --> 00:02:58.480
好吧，我认为原因是

00:02:58.480 --> 00:03:00.120
它的方向有点错误。

00:03:00.120 --> 00:03:01.560
我们来看一下旋转情况。

00:03:01.560 --> 00:03:03.760
这次我要旋转，也许在 X。

00:03:03.760 --> 00:03:05.400
看看它是如何工作的。

00:03:05.400 --> 00:03:06.720
是的，这确实有效。

00:03:06.720 --> 00:03:10.080
现在看看紫外线，是的，它更好了。

00:03:10.080 --> 00:03:14.560
我们再做一件事，即 UV 布局，

00:03:14.560 --> 00:03:16.960
只是为了让我们正确地布置 UV。

00:03:16.960 --> 00:03:20.840
好的，我们可以检查一下体重秤，

00:03:20.840 --> 00:03:22.680
面积与其表面积相匹配，

00:03:22.680 --> 00:03:24.440
所以他们的观点是正确的。

00:03:24.440 --> 00:03:29.440
我们也可以说我们有五个单位的填充

00:03:29.440 --> 00:03:32.220
并检查一下，这样我们就有了填充

00:03:32.220 --> 00:03:35.000
也发生在 UV 尾部的边缘。

00:03:35.000 --> 00:03:39.360
好的，这基本上是一些简单的 UV 布局。

00:03:39.360 --> 00:03:41.080
好的，是的。

00:03:41.080 --> 00:03:45.160
然后我想我们就可以继续了

00:03:45.160 --> 00:03:50.160
做一个简单的，我相信，如果你检查一下要点，

00:03:51.880 --> 00:03:56.440
您可以看到这些观点，我认为它们实际上还不错。

00:03:56.440 --> 00:03:59.320
是的，那么我们就不需要融合了。

00:03:59.320 --> 00:04:01.240
我在想这个帽子可以不熔合，

00:04:01.240 --> 00:04:02.520
但实际上它是融合了。

00:04:02.520 --> 00:04:05.480
好的，接下来在这里进行变换。

00:04:05.480 --> 00:04:08.040
这个用于我们的外部代码

00:04:08.040 --> 00:04:09.680
为了控制这个的大小，

00:04:09.680 --> 00:04:13.720
因为这目前是一个单位。

00:04:13.720 --> 00:04:16.040
我的意思是，它不是一个单位，实际上是两个单位

00:04:16.040 --> 00:04:17.400
当谈到尺寸时。

00:04:17.400 --> 00:04:19.520
我们只是想要有这个界面

00:04:19.520 --> 00:04:23.160
以便外部代码可以控制这里的大小。

00:04:23.160 --> 00:04:24.920
我要把这个家伙命名为 resize。

00:04:24.920 --> 00:04:28.880
我当然会填充或推广这些属性

00:04:28.880 --> 00:04:32.400
对于节点本身、对于子网络本身。

00:04:32.400 --> 00:04:34.720
好的，然后我想做另一件事

00:04:34.720 --> 00:04:37.560
这真的很酷，这是一个属性争论。

00:04:37.560 --> 00:04:42.560
我要把这个家伙称为“垂直边缘组”。

00:04:42.560 --> 00:04:48.000
并不是说要有办法让所有的垂直边缘

00:04:48.000 --> 00:04:49.840
属于同一组。

00:04:49.840 --> 00:04:52.600
这允许外部代码能够控制

00:04:52.600 --> 00:04:54.760
垂直方向上有一些斜面。

00:04:54.760 --> 00:04:56.720
他们可以按照自己想要的方式控制斜面

00:04:56.720 --> 00:04:57.760
使用配置文件。

00:04:57.760 --> 00:05:01.720
这个定义了，我们的轮廓在这里定义了斜面

00:05:01.720 --> 00:05:04.160
在水平线上。

00:05:04.160 --> 00:05:05.480
但对于垂直线，

00:05:05.480 --> 00:05:07.800
我希望能够在那里进行斜切

00:05:07.800 --> 00:05:09.480
并从根本上孤立这些人。

00:05:09.480 --> 00:05:12.580
那我们怎样才能找到它呢？对吧？

00:05:12.580 --> 00:05:16.760
我们实际上可以对其进行遍历。

00:05:16.760 --> 00:05:19.120
好的，对于我们这里的每一个点，

00:05:19.120 --> 00:05:21.440
我只想找垂直的

00:05:21.440 --> 00:05:23.360
然后把他们拉成一组。

00:05:23.360 --> 00:05:26.040
然后就很容易了，因为我们可以找到

00:05:26.040 --> 00:05:28.480
该点的所有邻居点。

00:05:28.480 --> 00:05:29.840
该点的所有邻居点。

00:05:29.840 --> 00:05:32.840
例如，点九有三个邻居。

00:05:32.840 --> 00:05:35.120
第八点、第十点和第21点。

00:05:35.120 --> 00:05:36.560
你知道只有一个点

00:05:36.560 --> 00:05:41.560
与点 9 相比，y 位置不同，

00:05:41.560 --> 00:05:42.800
也就是 21。

00:05:42.800 --> 00:05:46.560
然后这两点定义一条垂直线。

00:05:46.560 --> 00:05:48.360
我们只需要查询它周围的所有点

00:05:48.360 --> 00:05:51.080
并比较 y 方向、y 位置，

00:05:51.080 --> 00:05:52.680
并找出其中不同的一个。

00:05:52.680 --> 00:05:54.640
然后我们组成小组。

00:05:54.640 --> 00:05:56.400
好的，让我们看一下。

00:05:56.400 --> 00:05:58.880
首先我要说几点

00:05:58.880 --> 00:06:01.160
与邻居平等。

00:06:01.160 --> 00:06:04.400
这个给出了某个点的所有邻居。

00:06:04.400 --> 00:06:08.120
第一个论点是我们正在谈论什么几何？

00:06:08.120 --> 00:06:10.920
零意味着我们正在处理的这个几何图形，

00:06:10.920 --> 00:06:12.760
或者第一个输入，对吗？

00:06:12.760 --> 00:06:14.000
那正在进去。

00:06:14.000 --> 00:06:16.640
那么我们讨论的是哪一点？

00:06:16.640 --> 00:06:18.080
这只是当前的观点。

00:06:18.080 --> 00:06:20.600
添加点号表示当前点号

00:06:20.600 --> 00:06:21.840
我们正在操作的点。

00:06:21.840 --> 00:06:25.200
并且这种遍历在每个单独的点上都进行，

00:06:25.200 --> 00:06:26.040
逐个。

00:06:26.040 --> 00:06:27.160
之前我们做细节，

00:06:27.160 --> 00:06:28.320
现在我们正在计算积分。

00:06:28.320 --> 00:06:31.920
这样这段代码就可以在每个单独的点上运行。

00:06:31.920 --> 00:06:33.840
这个加点数给了我们

00:06:33.840 --> 00:06:35.280
该点的点编号。

00:06:35.280 --> 00:06:38.640
当我们说添加某些东西时，我们正在读取一个属性。

00:06:38.640 --> 00:06:40.120
是的，这是因为我们正在阅读

00:06:40.120 --> 00:06:42.320
点号属性，就是那些数字。

00:06:42.320 --> 00:06:45.040
这会给我们所有邻居点数

00:06:45.040 --> 00:06:47.920
的点数，这就是我们输入的点数。

00:06:47.920 --> 00:06:50.240
好的，让我们循环遍历所有点。

00:06:50.240 --> 00:06:52.360
因此对于每个来说都足够了。

00:06:52.360 --> 00:06:57.360
并且观点是否定的，对吗？

00:06:57.360 --> 00:07:00.680
点内部的邻居，对吗？

00:07:00.680 --> 00:07:01.760
让我们找到他们的位置。

00:07:01.760 --> 00:07:06.600
矢量 nay 位置将等于点。

00:07:06.600 --> 00:07:10.320
点函数给了我们一个点的属性，对吗？

00:07:10.320 --> 00:07:12.800
我们正在讨论的是哪种几何形状？

00:07:12.800 --> 00:07:15.160
再次，零，然后是什么参数，

00:07:15.160 --> 00:07:17.240
我们正在读取什么属性或特性，

00:07:17.240 --> 00:07:18.800
这是位置属性。

00:07:18.800 --> 00:07:20.960
这应该是一个字符串。

00:07:20.960 --> 00:07:22.920
那么我们讨论的重点是什么？

00:07:22.920 --> 00:07:24.680
这就是我们询问的邻居。

00:07:24.680 --> 00:07:28.160
因此我们正在查找每个邻居的位置或立场。

00:07:28.160 --> 00:07:29.360
我们来检查一下。

00:07:29.360 --> 00:07:34.240
如果绝对邻居位置点 x

00:07:34.240 --> 00:07:38.960
减去我们的位置，即 p 点，而不是 x，抱歉，是 y。

00:07:38.960 --> 00:07:39.800
我们正在检查 y，对吗？

00:07:39.800 --> 00:07:44.240
如果它们的 y 非常接近，小于，

00:07:44.240 --> 00:07:48.640
实际上并不小于，大于

00:07:48.640 --> 00:07:49.960
因为我们正在检查垂直的，

00:07:49.960 --> 00:07:53.400
它的 y 位置不同，对吗？

00:07:53.400 --> 00:07:54.800
比他们的那个点还大。

00:07:54.800 --> 00:07:58.120
这意味着它们彼此距离太远了。

00:07:58.120 --> 00:08:00.720
我们正在对照这一点进行检查，对吗？

00:08:00.720 --> 00:08:03.840
这个邻居很可能是一个垂直的，对吗？

00:08:03.840 --> 00:08:05.720
与我们有关，好吗？

00:08:05.720 --> 00:08:08.520
现在我们可以在那里创建组

00:08:08.520 --> 00:08:12.240
通过说设置边缘组，设置边缘组，

00:08:12.240 --> 00:08:14.400
并且该组将位于几何上。

00:08:14.400 --> 00:08:17.760
然后它就会变成垂直的。

00:08:17.760 --> 00:08:19.640
然后我们传入点号，

00:08:19.640 --> 00:08:23.800
然后是邻居，然后是一个，对吗？

00:08:23.800 --> 00:08:27.760
所以我们说，嘿，我们正在设置一个点边组，对吗？

00:08:27.760 --> 00:08:29.720
该组称为垂直，

00:08:29.720 --> 00:08:32.040
该群由这两点组成，

00:08:32.040 --> 00:08:34.000
我们的，在这一点上，以及邻居点。

00:08:34.000 --> 00:08:35.400
然后组值为 1，

00:08:35.400 --> 00:08:38.360
意思是它在群里，好吗？

00:08:38.360 --> 00:08:40.560
就像这样，让我们​​按 Enter 键来运行它，

00:08:40.560 --> 00:08:43.000
然后我们可以按 S 键进行选择，

00:08:43.000 --> 00:08:45.160
并选择边，也就是数字 3，

00:08:45.160 --> 00:08:48.640
然后去普雷斯顿。

00:08:48.640 --> 00:08:49.920
你可以看到我们有一个垂直的，

00:08:49.920 --> 00:08:54.560
这给了我们旋转中的所有垂直线，

00:08:54.560 --> 00:08:56.600
当你使用它时这真的很好

00:08:56.600 --> 00:08:58.240
像在那儿胡言乱语一样。

00:08:58.240 --> 00:09:03.240
例如，如果我们这里只有四个，按部门划分，

00:09:03.240 --> 00:09:07.840
对，然后我们想喋喋不休地说，

00:09:07.840 --> 00:09:11.440
现在我们就可以做到，因为我们有垂直线，

00:09:11.440 --> 00:09:13.040
好的，我们可以在那里快速闲聊一下

00:09:13.040 --> 00:09:14.400
只是为了测试持久性，对吗？

00:09:14.400 --> 00:09:17.520
我们可以胡言乱语，然后我们就可以真正胡言乱语了

00:09:17.520 --> 00:09:21.480
这些垂直线上，非常漂亮。

00:09:21.480 --> 00:09:23.920
那么我们进入群组，选择垂直，

00:09:23.920 --> 00:09:26.280
我们可以拖动这段距离。

00:09:26.280 --> 00:09:28.320
你可以看到我们正在喋喋不休地说着垂直线。

00:09:28.320 --> 00:09:29.600
那有多酷？

00:09:29.600 --> 00:09:33.040
我们不必担心水平线。

00:09:33.040 --> 00:09:35.400
好的，我们又不在这里做，

00:09:35.400 --> 00:09:37.120
我们只给出外部代码，

00:09:37.120 --> 00:09:39.560
如果他们选择喋喋不休的话，他们就无法控制这一点。

00:09:39.560 --> 00:09:45.440
好的，这就组成了我们需要的所有节点

00:09:45.440 --> 00:09:47.520
我们的左轮手枪对吧？

00:09:47.520 --> 00:09:49.320
我们这里有很多信息，

00:09:49.320 --> 00:09:53.840
外部代码可以使用它来做任何旋转

00:09:53.840 --> 00:09:56.040
他们想从个人资料开始。

00:09:56.040 --> 00:09:58.920
好的，那么在下一个视频中，

00:09:58.920 --> 00:10:01.040
我们将转换这个子网

00:10:01.040 --> 00:10:02.800
变成 Houdini 或 DDoS 资产，

00:10:02.800 --> 00:10:04.560
我们可以看看这个过程，

00:10:04.560 --> 00:10:08.160
对数字资产进行必要的控制，

00:10:08.160 --> 00:10:12.600
所以我们能够从顶部节点控制它。

00:10:12.600 --> 00:10:14.360
好的，本期的视频就到这里。

00:10:14.360 --> 00:10:15.560
下次再见。

