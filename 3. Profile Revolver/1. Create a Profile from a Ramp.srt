WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.580
（欢快的音乐）

00:00:02.580 --> 00:00:05.480
大家好，欢迎回来。

00:00:05.480 --> 00:00:08.280
在本视频中，我们将尝试

00:00:08.280 --> 00:00:10.280
我们的 Houdini 数字资产之一

00:00:10.280 --> 00:00:12.720
我们将在建筑中重复使用

00:00:12.720 --> 00:00:14.520
我们的程序建设。

00:00:14.520 --> 00:00:16.920
好吧，以防你们不知道

00:00:16.920 --> 00:00:19.040
Houdini 数字资产是什么

00:00:19.040 --> 00:00:22.000
基本上我们可以保存一个子网络

00:00:22.000 --> 00:00:24.640
并在不同的项目中重复使用。

00:00:24.640 --> 00:00:26.200
举个例子，

00:00:26.200 --> 00:00:27.800
我们可以先在这里制作一个几何图形

00:00:27.800 --> 00:00:32.120
然后制作一个实验室自动紫外线。

00:00:32.120 --> 00:00:35.520
这是一个 Houdini 数字资产的示例。

00:00:35.520 --> 00:00:38.280
它看起来像一个节点，但您可以双击打开它。

00:00:38.280 --> 00:00:40.000
您可以看到它实际上是一个子网

00:00:40.000 --> 00:00:42.760
其中有一堆节点，对吗？

00:00:42.760 --> 00:00:44.280
所以我们要做这样的事情，

00:00:44.280 --> 00:00:46.160
但我们也不会做任何紫外线。

00:00:46.160 --> 00:00:49.320
相反，我们要在这里制造一把左轮手枪。

00:00:49.320 --> 00:00:52.440
我的意思是，我想这样更容易

00:00:52.440 --> 00:00:54.820
我可以向你展示一下我们在这里要做的事情，可以吗？

00:00:54.820 --> 00:00:58.120
首先，我要先画一条曲线，好吗？

00:00:58.120 --> 00:01:01.720
然后按空格键三进入前视图

00:01:01.720 --> 00:01:06.720
然后按回车键开始绘制一条直线、一条曲线。

00:01:06.720 --> 00:01:09.700
所以在这种情况下我要尝试制作玻璃杯。

00:01:09.700 --> 00:01:11.460
因此我在这里创建了这个简介。

00:01:11.460 --> 00:01:15.640
也许那是玻璃，对吧？

00:01:15.640 --> 00:01:18.960
并打开网格捕捉，这样我就可以将其捕捉到那里。

00:01:18.960 --> 00:01:21.520
然后，是的，按下回车键。

00:01:21.520 --> 00:01:24.960
好的，现在我可以继续制作左轮手枪了，

00:01:24.960 --> 00:01:26.120
一个旋转节点，对吗？

00:01:26.120 --> 00:01:29.220
然后就可以把它旋转成真正的玻璃杯了。

00:01:29.220 --> 00:01:33.640
我没在中心做这件事，好吗？

00:01:33.640 --> 00:01:34.840
但你明白我的意思。

00:01:34.840 --> 00:01:36.480
我们正在淘汰一些东西。

00:01:36.480 --> 00:01:40.160
我想我需要改造它才能让它发挥作用

00:01:40.160 --> 00:01:43.840
只是为了更容易地看到我正在做的事情。

00:01:43.840 --> 00:01:45.880
基本上就是像这样制作玻璃。

00:01:45.880 --> 00:01:48.800
好的，但是这种方法有一些缺点，

00:01:48.800 --> 00:01:51.920
其中之一就是，哦，那里发生了什么事？

00:01:51.920 --> 00:01:55.400
其中之一就是它们非常乏味。

00:01:55.400 --> 00:02:00.960
我的意思是，你必须做出曲线。

00:02:00.960 --> 00:02:05.040
曲线必须位于世界的中心，对吗？

00:02:05.040 --> 00:02:08.560
然后你还必须始终回到那条曲线。

00:02:08.560 --> 00:02:10.520
我们需要，你需要做出改变。

00:02:10.520 --> 00:02:12.320
你必须总是去前视图

00:02:12.320 --> 00:02:15.840
然后你只需要抓住这些点并移动它们。

00:02:15.840 --> 00:02:18.720
而且因为您已经创建了它们，对吗？

00:02:18.720 --> 00:02:21.000
我想你必须真正回到这个工具

00:02:21.000 --> 00:02:22.360
并在这里做了很多改变。

00:02:22.360 --> 00:02:25.800
这只是大量的操作工作。

00:02:25.800 --> 00:02:28.440
如果不是从曲线开始的话会更好，

00:02:28.440 --> 00:02:30.400
还有别的，好吗？

00:02:30.400 --> 00:02:32.240
我们在这里还想做什么

00:02:32.240 --> 00:02:33.080
而不是曲线？

00:02:33.080 --> 00:02:35.720
嗯，我们实际上可以自己画一条曲线，

00:02:35.720 --> 00:02:39.920
但是从坡道的信息来看，好吗？

00:02:39.920 --> 00:02:43.400
我的意思是，你们以前见过 Ramp，对吧？

00:02:43.400 --> 00:02:46.040
我的意思是，到这里，进入编辑参数界面

00:02:46.040 --> 00:02:50.000
然后在这里添加一个斜坡，斜坡浮动。

00:02:50.000 --> 00:02:51.980
所以我可以给你看一下，对吧？

00:02:51.980 --> 00:02:53.680
所以这里不要画这个曲线，

00:02:53.680 --> 00:02:56.120
我想在这里画曲线。

00:02:56.120 --> 00:02:57.980
这或多或少也像一条曲线，

00:02:57.980 --> 00:03:00.160
尽管它实际上是一张图表，

00:03:00.160 --> 00:03:04.400
但想象一下，我们可以像这样创建点

00:03:04.400 --> 00:03:07.160
来模仿玻璃的相同轮廓。

00:03:07.160 --> 00:03:10.960
我想转换我们在这张图表中得到的数据，

00:03:10.960 --> 00:03:14.100
对的，就是我们在这里画的那个曲线，对吗？

00:03:14.100 --> 00:03:17.200
这样，在我们的用户界面中，我们所要做的就是

00:03:17.200 --> 00:03:20.040
去这个特定的频道然后改变它，

00:03:20.040 --> 00:03:22.400
这会改变我们得到的资料，对吗？

00:03:22.400 --> 00:03:24.400
这样会方便得多

00:03:24.400 --> 00:03:27.820
而不是先到这里然后拐弯，对吧？

00:03:27.820 --> 00:03:28.880
这就是基本思想，

00:03:28.880 --> 00:03:30.680
这就是我们自己制造左轮手枪的原因。

00:03:30.680 --> 00:03:32.600
我们并不是真的想模仿这个东西，

00:03:32.600 --> 00:03:34.400
我们正在制作一个方便的工具

00:03:34.400 --> 00:03:38.600
这使我们能够将我们的轮廓定义为斜坡，好吗？

00:03:38.600 --> 00:03:39.760
希望这是有意义的。

00:03:39.760 --> 00:03:41.500
所以我要去把这些人全部删掉，

00:03:41.500 --> 00:03:43.100
然后我们开始构建它。

00:03:44.080 --> 00:03:46.920
我要在这里创建一个子网，

00:03:46.920 --> 00:03:49.200
不是子网，这里是子网，

00:03:49.200 --> 00:03:52.440
然后这个名字就叫左轮手枪。

00:03:52.440 --> 00:03:58.660
好的，也许是轮廓左轮手枪，只是为了更酷。

00:03:58.660 --> 00:04:02.020
好的，然后进入里面。

00:04:02.020 --> 00:04:04.160
现在让我放下 HP Rango

00:04:04.160 --> 00:04:07.280
并将其插入输入和输出之间，

00:04:07.280 --> 00:04:09.340
给这个人的个人资料命名。

00:04:10.800 --> 00:04:13.540
好的，然后我们会详细介绍。

00:04:13.540 --> 00:04:16.660
让我按 E 键打开更大的窗口，

00:04:16.660 --> 00:04:20.260
控制加号，然后要求更改文本大小，对吗？

00:04:20.260 --> 00:04:25.260
然后假设浮筒轮廓等于通道坡道，

00:04:25.260 --> 00:04:29.560
例如，然后进行分析，

00:04:29.560 --> 00:04:34.860
然后是 1，然后是分列，然后是控制输入，

00:04:34.860 --> 00:04:37.140
然后我们可以点击那个小滑块

00:04:37.140 --> 00:04:40.620
创建我们想要创建的配置文件。

00:04:40.620 --> 00:04:44.860
所以这一行创建了，或者我们的代码是说

00:04:44.860 --> 00:04:47.020
我们创建了一个浮点变量，对吗？

00:04:47.020 --> 00:04:49.280
它会从通道读取值

00:04:49.280 --> 00:04:51.900
那是斜坡类型，好吗？

00:04:51.900 --> 00:04:55.500
这是一个尝试读取通道值的函数

00:04:55.500 --> 00:04:57.340
那是斜坡类型，好吗？

00:04:57.340 --> 00:04:59.740
该频道的名称为个人资料，

00:04:59.740 --> 00:05:04.340
我们读取的值来自坐标一，好吗？

00:05:04.340 --> 00:05:05.980
然后我们之前点击的那个按钮

00:05:05.980 --> 00:05:10.420
如果不存在，则会创建一个名为 profile 的频道，

00:05:10.420 --> 00:05:11.500
或者如果你把光标放在这里，

00:05:11.500 --> 00:05:14.340
它实际上会创建备用参数

00:05:14.340 --> 00:05:16.320
对于每个唯一的频道呼叫，对吗？

00:05:16.320 --> 00:05:17.980
每次你打电话的时候

00:05:17.980 --> 00:05:19.900
并试图发现，如果它不存在，

00:05:19.900 --> 00:05:23.300
点击该按钮，为我们创建一个。

00:05:23.300 --> 00:05:26.880
这样就自动创建一个配置文件频道。

00:05:26.880 --> 00:05:29.620
它是坡道类型，对吗？

00:05:29.620 --> 00:05:32.120
我们从坐标一读取值，

00:05:32.120 --> 00:05:34.460
我的意思是我们正在读取值。

00:05:34.460 --> 00:05:37.340
这是 x 坐标，这是 y 坐标，对吗？

00:05:37.340 --> 00:05:40.660
我们说 x 坐标一，那里的 y 值是多少？

00:05:40.660 --> 00:05:41.700
在这种情况下，

00:05:41.700 --> 00:05:44.060
所以我们的浮点值确实应该是一。

00:05:44.060 --> 00:05:45.940
如果我们把它改成这样，

00:05:45.940 --> 00:05:49.860
该值将是 .6，对，就是这样，好吗？

00:05:49.860 --> 00:05:52.860
您可以单击并拖动来添加新点。

00:05:52.860 --> 00:05:56.860
所以我希望大家对这个 ramp 属性并不陌生。

00:05:56.860 --> 00:06:01.500
这又不是初学者课程，

00:06:01.500 --> 00:06:04.280
所以我希望你们了解一些基础知识。

00:06:04.280 --> 00:06:05.880
如果你不知道这是什么

00:06:05.880 --> 00:06:07.620
之前我没接触过这个，

00:06:07.620 --> 00:06:09.820
我们在这里做的一切都是误导，

00:06:09.820 --> 00:06:13.300
如此难以理解，你从未见过，

00:06:13.300 --> 00:06:16.340
您可能看错了教程。

00:06:16.340 --> 00:06:19.540
说实话，这又不是一个初学者教程，好吗？

00:06:19.540 --> 00:06:22.060
好了，话虽这么说，

00:06:22.060 --> 00:06:24.980
基本上如果我有这个，好吧，

00:06:24.980 --> 00:06:27.860
想象一下这是我们之前制作的玻璃轮廓

00:06:27.860 --> 00:06:29.660
现在躺在地上，

00:06:29.660 --> 00:06:34.660
我想用这个创建一条线，可以吗？

00:06:34.780 --> 00:06:36.820
但问题是，我们如何才能读懂

00:06:36.820 --> 00:06:39.060
各个要点是什么，

00:06:39.060 --> 00:06:41.220
它们在哪里以及它们对应的值是多少，

00:06:41.220 --> 00:06:42.620
诸如此类的事情，对吧？

00:06:42.620 --> 00:06:46.340
乍一看它似乎是一个黑盒子，

00:06:46.340 --> 00:06:47.660
我们不可能读懂，

00:06:47.660 --> 00:06:50.460
但实际上是有办法的。

00:06:50.460 --> 00:06:51.660
让我在这里向你展示一下。

00:06:51.660 --> 00:06:57.780
让我画出矩形的另一条边，

00:06:57.780 --> 00:07:02.780
然后说浮点测试将等于零。

00:07:03.180 --> 00:07:06.740
测试将等于通道，

00:07:06.740 --> 00:07:11.180
然后测试，控制输入并单击它。

00:07:11.180 --> 00:07:13.260
好的，你可以看到，这次它正在创建一个浮点数。

00:07:13.260 --> 00:07:15.740
当我们说没有任何内容的渠道时，

00:07:15.740 --> 00:07:17.220
我们基本上说的是浮动，

00:07:17.220 --> 00:07:20.620
但如果你做 CHI，我们读的是一个整数，通道斜坡，

00:07:20.620 --> 00:07:21.980
好的，我们正在读一个斜坡，

00:07:21.980 --> 00:07:24.460
现在我们只读浮点数。

00:07:24.460 --> 00:07:25.460
我们在这里什么也没做，

00:07:25.460 --> 00:07:27.940
而不只是输入一些表达式

00:07:27.940 --> 00:07:29.900
向你展示我们可以用它做什么，好吗？

00:07:29.900 --> 00:07:32.460
比如说频道，

00:07:32.460 --> 00:07:35.660
通道意味着我们正在从某个东西读取通道值。

00:07:35.660 --> 00:07:37.100
我们读到的也是一样

00:07:37.100 --> 00:07:38.940
在引号内。

00:07:38.940 --> 00:07:40.460
我们说点点。

00:07:40.460 --> 00:07:42.820
好的，点点指的是轮廓左轮手枪，

00:07:42.820 --> 00:07:47.660
它是我们正在讨论的当前节点的父节点。

00:07:47.660 --> 00:07:48.700
然后我们要做四张幻灯片，

00:07:48.700 --> 00:07:50.940
所以我们正在读其中的一些内容。

00:07:50.940 --> 00:07:53.380
您可以看到我们的个人资料节点，对吧，

00:07:53.380 --> 00:07:56.460
我们的个人资料节点，就是这个家伙，对的，就在里面。

00:07:57.420 --> 00:08:01.100
因为点点是轮廓旋转节点，

00:08:01.100 --> 00:08:03.340
并且正斜杠是其内部内容。

00:08:03.340 --> 00:08:06.180
然后我们就可以在那里阅读我们的个人资料。

00:08:06.180 --> 00:08:08.380
然后我们就可以读取配置文件节点上的所有频道。

00:08:08.380 --> 00:08:12.780
你可以看到这个个人资料，对，这个个人资料，

00:08:12.780 --> 00:08:16.980
如果我们读一下，你就会发现它的值为零。

00:08:16.980 --> 00:08:18.060
那么“无”是什么？

00:08:18.060 --> 00:08:22.140
嗯，实际上那里面的点数为零。

00:08:22.140 --> 00:08:24.340
如果你数一数，就会发现确实有

00:08:24.340 --> 00:08:28.020
一、二、三、四、五、六、七、八、九点。

00:08:28.020 --> 00:08:28.860
正确的？

00:08:28.860 --> 00:08:31.460
然后，是的，这实际上会给我们

00:08:31.460 --> 00:08:34.060
其中的积分数量。

00:08:34.060 --> 00:08:36.140
但不仅如此，我们还可以读取其他数据，

00:08:36.140 --> 00:08:38.380
喜欢简介一个位置。

00:08:38.380 --> 00:08:40.580
这个值是多少？

00:08:40.580 --> 00:08:44.540
如果你看一下这里的值，它是 .0017，对吗？

00:08:44.540 --> 00:08:47.420
然后我们来看这里，如果你看那个点，

00:08:47.420 --> 00:08:52.420
这实际上就是该点的位置，0.0017左右。

00:08:52.620 --> 00:08:53.700
正确的，那里的价值完全相同。

00:08:53.700 --> 00:08:55.940
所以我们正在读取第一个点的位置

00:08:55.940 --> 00:08:58.380
通过输入此表达式。

00:08:58.380 --> 00:09:02.380
我们也可以说概况一个值。

00:09:02.380 --> 00:09:03.940
好的，我们再看一下。

00:09:03.940 --> 00:09:05.580
你可以看到那是.88左右，

00:09:05.580 --> 00:09:09.340
这正是该点的确切值，.88，对吗？

00:09:09.340 --> 00:09:12.340
所以你可以看到我们能够读懂每一个点

00:09:12.340 --> 00:09:15.820
如果我们为该属性输入正确的命名。

00:09:15.820 --> 00:09:18.740
.1 是配置文件 1 的值，

00:09:18.740 --> 00:09:20.940
并且 .2 是配置文件的两个值。

00:09:20.940 --> 00:09:23.740
并且 .2 是配置文件的两个值，对吗？

00:09:23.740 --> 00:09:26.060
如果我们做两个，你可以看到我们得到了.5，

00:09:26.060 --> 00:09:30.140
第二点的值是多少？.5 左右，对吗？

00:09:30.140 --> 00:09:32.180
既然如此，我们实际上可以得到

00:09:32.180 --> 00:09:35.980
仅使用代码就可以获得我们需要的所有数据，对吗？

00:09:35.980 --> 00:09:37.740
这再次体现了代码的力量。

00:09:37.740 --> 00:09:39.380
我们可以真正表达我们的想法

00:09:39.380 --> 00:09:41.980
只需像这样简单的表达。

00:09:41.980 --> 00:09:44.580
那么让我们看看如何才能真正获取这些数据

00:09:44.580 --> 00:09:48.260
并以此创作出真正的诗句。

00:09:49.500 --> 00:09:51.980
首先，我需要读出我们有多少个点，

00:09:51.980 --> 00:09:53.220
我们已经知道如何做到这一点，

00:09:53.220 --> 00:09:55.500
也就是立即阅读频道。

00:09:55.500 --> 00:10:00.500
因此 int 点数将等于 ch i，

00:10:00.500 --> 00:10:04.540
因为我们正在读取一个整数，对吗？

00:10:04.540 --> 00:10:07.420
然后我们基本上就在读我们自己。

00:10:07.420 --> 00:10:12.420
我们可以做.forward profile，.forward，.is 我们自己，对吗？

00:10:12.420 --> 00:10:14.260
.forward 是我们自身所拥有的。

00:10:14.260 --> 00:10:16.940
我们正在读取那里的个人资料属性，好吗？

00:10:16.940 --> 00:10:19.140
Control + Enter，我们甚至可以将其打印出来。

00:10:20.180 --> 00:10:25.180
点数为百分比 D 和反斜杠 N

00:10:25.180 --> 00:10:28.700
然后点数。

00:10:28.700 --> 00:10:31.500
正如你已经得到的 none 值一样，

00:10:31.500 --> 00:10:34.460
这正是我们需要知道的，对吧？

00:10:34.460 --> 00:10:36.420
然后有了这些数据，

00:10:36.420 --> 00:10:40.140
然后我们可以通过 for 循环来创建这些点。

00:10:40.140 --> 00:10:46.340
因此当 int i 等于零时，i 小于点数，

00:10:48.620 --> 00:10:51.140
然后 i++，好吗？

00:10:51.140 --> 00:10:52.300
如果我们想变得更聪明，

00:10:52.300 --> 00:10:55.500
我们知道第一个不是零，而是一，对吗？

00:10:55.500 --> 00:10:57.540
此点为.1。

00:10:57.540 --> 00:11:00.020
所以我们可以稍微改变一下我们的 for 循环。

00:11:00.020 --> 00:11:01.940
所以我们先从一件事开始，

00:11:01.940 --> 00:11:03.340
然后我们把它变小，

00:11:03.340 --> 00:11:05.980
而且还等于，小于或等于，对吗？

00:11:05.980 --> 00:11:10.980
这样我们仍然不会让这个 for 循环运行任何一次，

00:11:10.980 --> 00:11:12.700
但第一次 i 的值是 1，

00:11:12.700 --> 00:11:14.100
最后一次 i 的值为九。

00:11:14.100 --> 00:11:17.060
所以从一到九而不是从零到八，

00:11:17.060 --> 00:11:20.500
因为这实际上就是点的编号，好吗？

00:11:20.500 --> 00:11:22.620
好的，那我们就读取数据吧。

00:11:22.620 --> 00:11:23.860
我想读取两个数据。

00:11:23.860 --> 00:11:26.140
一个是位置，一个是价值。

00:11:26.140 --> 00:11:29.220
记住了，那是在底部的位置，对吗？

00:11:29.220 --> 00:11:31.100
x 坐标是它们的位置，

00:11:31.100 --> 00:11:34.300
然后该值就是它们的 y 坐标值，好吗？

00:11:34.300 --> 00:11:38.900
因此浮点位置将等于，

00:11:38.900 --> 00:11:40.980
正在阅读我们的频道，对吧？

00:11:40.980 --> 00:11:43.580
点向前轮廓，对吗？

00:11:43.580 --> 00:11:45.780
然后我们需要在分析之后，

00:11:45.780 --> 00:11:49.140
如果你还记得的话，对吧？

00:11:49.140 --> 00:11:52.980
先有个人资料，然后有号码，对吗？

00:11:52.980 --> 00:11:55.940
然后是属性值或者位置，对吗？

00:11:55.940 --> 00:11:57.380
诸如此类的事情。

00:11:57.380 --> 00:11:58.740
所以我们需要创作它。

00:11:58.740 --> 00:12:00.940
这只是简介，我们需要添加一些内容。

00:12:00.940 --> 00:12:03.580
所以我们在那里添加数字，对吗？

00:12:03.580 --> 00:12:05.700
在这种情况下，数字是 i，对吗？

00:12:05.700 --> 00:12:09.500
但它不能只是 i，因为 i 是一个整数。

00:12:09.500 --> 00:12:13.420
我们正在尝试把整个字符串组合在一起，

00:12:13.420 --> 00:12:15.300
对的，用引号引起来。

00:12:15.300 --> 00:12:18.180
所以那不能只是 i，而必须是另一个字符串，对吗？

00:12:18.180 --> 00:12:20.500
您可以制作一个字符串加上另一个字符串。

00:12:20.500 --> 00:12:22.660
它基本上是将两者连接在一起，

00:12:22.660 --> 00:12:24.140
把它们结合在一起吧？

00:12:24.140 --> 00:12:26.140
所以我要对 a 说，

00:12:26.140 --> 00:12:29.020
意思是将整数转换成字符串。

00:12:29.020 --> 00:12:30.660
因此我们在那里放了一个 i。

00:12:30.660 --> 00:12:31.740
我们就是这样做的。

00:12:31.740 --> 00:12:36.220
这将是配置文件一、配置文件二，依此类推。

00:12:36.220 --> 00:12:40.700
然后我们添加最后一位，也就是位置，对吗？

00:12:40.700 --> 00:12:43.940
所以，配置文件一位置，配置文件二位置，对吗？

00:12:43.940 --> 00:12:47.260
按照类似的趋势，我们可以得到一个点值，

00:12:47.260 --> 00:12:48.900
将再次等于频道，

00:12:48.900 --> 00:12:53.180
但这次是点向前轮廓，

00:12:53.180 --> 00:12:57.220
然后将 i 加到 a，将 i 加到 a，然后 i，

00:12:57.220 --> 00:12:59.460
但这次它是价值。

00:12:59.460 --> 00:13:01.740
好的，我们正在宣读立场，

00:13:01.740 --> 00:13:03.380
该点的价值。

00:13:03.380 --> 00:13:04.220
猜猜怎么着？

00:13:04.220 --> 00:13:06.300
我们只是添加了一个新点，对吗？

00:13:06.300 --> 00:13:10.260
那么新点就将成为添加点，对吗？

00:13:10.260 --> 00:13:11.540
并且加上我们自己，

00:13:11.540 --> 00:13:14.740
并且职位将以这两者为基础。

00:13:14.740 --> 00:13:17.660
我要说的是这将是 x 位置。

00:13:17.660 --> 00:13:19.940
这是 y 位置，

00:13:19.940 --> 00:13:21.980
并且 z 位置将为零。

00:13:21.980 --> 00:13:23.460
这将是一个向量，对吗？

00:13:23.460 --> 00:13:24.860
点的位置。

00:13:24.860 --> 00:13:27.780
当我说“设定”时，

00:13:27.780 --> 00:13:32.420
然后这里指向的位置，

00:13:32.420 --> 00:13:34.400
点值，

00:13:34.400 --> 00:13:37.700
我将使用 p、值，

00:13:37.700 --> 00:13:40.220
然后为零，好吗？

00:13:40.220 --> 00:13:42.860
这将为这个位置加分

00:13:42.860 --> 00:13:45.580
x 是点的位置，

00:13:45.580 --> 00:13:48.620
y 是该点的值，

00:13:48.620 --> 00:13:50.260
z 为零。

00:13:50.260 --> 00:13:53.060
我们不是在制作数组，

00:13:53.060 --> 00:13:54.740
我们正在制作布景。

00:13:54.740 --> 00:13:57.460
这只是所需的语法。

00:13:57.460 --> 00:13:59.740
该集合将自动转换为矢量，

00:13:59.740 --> 00:14:02.180
对的，用来强调点，可以吗？

00:14:02.180 --> 00:14:04.140
因为我们在这里使用变量，

00:14:04.140 --> 00:14:06.580
您不能只使用花括号。

00:14:06.580 --> 00:14:07.580
这就是局限性。

00:14:07.580 --> 00:14:09.180
我还是不知道为什么，对吧？

00:14:09.180 --> 00:14:10.100
限制就在这里。

00:14:10.100 --> 00:14:12.620
所以如果你正在制作一个矢量或任何东西

00:14:12.620 --> 00:14:15.140
需要利用变量值，

00:14:15.140 --> 00:14:16.820
你需要做一些设置，好吗？

00:14:16.820 --> 00:14:18.180
这将会提出新的观点。

00:14:18.180 --> 00:14:19.060
我会再运行一次，

00:14:19.060 --> 00:14:24.060
并且您可以看到我们是如何在这里获得相同观点的。

00:14:24.060 --> 00:14:26.180
好的，这是个人资料。

00:14:26.180 --> 00:14:27.700
您会在其中看到相同的观点。

00:14:27.700 --> 00:14:30.120
它们被拉长了，因为它们本来就应该这样。

00:14:30.120 --> 00:14:32.660
范围是从零到一，对吗？

00:14:32.660 --> 00:14:33.780
我们看到了这些观点。

00:14:33.780 --> 00:14:37.780
好的，现在我们要实际地从中创建一条线。

00:14:37.780 --> 00:14:38.620
我们该怎么做呢？

00:14:38.620 --> 00:14:40.980
好吧，我们需要记住我们创建的所有点。

00:14:40.980 --> 00:14:43.480
我要把它放入清单中。

00:14:43.480 --> 00:14:48.060
所以 int 点，数组，对不起，一个数组。

00:14:48.060 --> 00:14:51.520
然后我们将新点附加到这些点上。

00:14:51.520 --> 00:14:57.900
最后，我们只需将原始内容添加到我们的模型中。

00:14:57.900 --> 00:15:01.140
然后我们要添加折线类型。

00:15:01.140 --> 00:15:03.180
我们正在添加一条线，对吗？

00:15:03.180 --> 00:15:06.340
然后我们将点作为最后一个参数传入。

00:15:06.340 --> 00:15:09.300
我们说我们在划一条线。

00:15:09.300 --> 00:15:13.420
线就是由这些点组成的，对吗？

00:15:13.420 --> 00:15:16.380
现在您可以再次看到我们是如何获得这一点的。

00:15:16.380 --> 00:15:17.500
好的，很漂亮。

00:15:17.500 --> 00:15:20.820
这就是我们如何转换坡道

00:15:20.820 --> 00:15:23.020
变成实际的曲线。

00:15:23.020 --> 00:15:25.820
您可以看到它是如何实时更新的。

00:15:25.820 --> 00:15:28.060
我们可以添加新点，对吗？

00:15:28.060 --> 00:15:28.900
非常酷。

00:15:28.900 --> 00:15:33.100
好的，这就是第一个视频的内容。

00:15:33.100 --> 00:15:35.060
它比我想要的要长一点，

00:15:35.060 --> 00:15:38.020
但我只是想详细解释一切。

00:15:38.020 --> 00:15:42.060
再说一次，有时候如果感觉很难，

00:15:42.060 --> 00:15:43.540
只是因为这是编码

00:15:43.540 --> 00:15:46.940
然后我们就刚刚学习了一些编码。

00:15:46.940 --> 00:15:50.320
所以你一定要理解这些台词，

00:15:50.320 --> 00:15:52.260
即使速度较慢，对吗？

00:15:52.260 --> 00:15:54.380
当你遇到困难时就暂停一下。

00:15:54.380 --> 00:15:57.100
只需思考一下我说了什么，对吗？

00:15:57.100 --> 00:15:59.900
为什么，这些不同的功能是做什么的？

00:15:59.900 --> 00:16:01.100
读东西，对吧？

00:16:01.100 --> 00:16:03.900
然后我们如何转换

00:16:03.900 --> 00:16:06.420
或者将属性组合或组合在一起

00:16:06.420 --> 00:16:08.220
我们正在尝试阅读。

00:16:08.220 --> 00:16:10.260
这就是将整数转换为字符串的方法，对吗？

00:16:10.260 --> 00:16:12.760
我们将三个字符串添加到一个更大的字符串中

00:16:12.760 --> 00:16:15.320
一个接一个，对吗？

00:16:15.320 --> 00:16:19.380
它的设置将是我们用来创建矢量的方式

00:16:19.380 --> 00:16:22.060
为点的位置。

00:16:22.060 --> 00:16:25.060
这就是我们添加原始元素的方式，对吗？

00:16:25.060 --> 00:16:27.620
看看整个逻辑是如何完成的，对吗？

00:16:27.620 --> 00:16:30.980
一旦你理解了它，就不会太难了，

00:16:30.980 --> 00:16:33.340
但如果你不理解而只是抄袭，

00:16:33.340 --> 00:16:37.140
你永远不可能真正独自完成这件事。

00:16:37.140 --> 00:16:40.180
所以要小心，并尝试去理解它。

00:16:40.180 --> 00:16:41.660
这才是关键。

00:16:41.660 --> 00:16:44.020
好的，第一个视频就是这样。

00:16:44.020 --> 00:16:47.260
在下一个中，我将尝试创建更多节点

00:16:47.260 --> 00:16:51.180
让它真正旋转，而不只是这一条曲线。

00:16:51.180 --> 00:16:52.980
好的，大家下次再见。

